@inject ICarritoServicio carritoServicio
@inject SweetAlertService Swal;
@inject NavigationManager _navigationManager
@implements IDisposable
@using EtiSysAdmin.Client.Extensiones;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@inject AuthenticationStateProvider autenticacionProvider

@*<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">EtiSysAdmin</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>
*@

<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-primary-eti">
    <div class="container">
        <a class="navbar-brand" runat="server">EtiSysAdmin</a>
        <button type="button" class="navbar-toggler" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" title="Alternar navegación" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass navbar-collapse d-sm-inline-flex justify-content-between">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4">
                <AuthorizeView Roles="Usuario">
                    <Authorized>
                        <li class="nav-item"><NavLink class="nav-link" href="dashboard"> Dashboard</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="usuarios"> Usuarios</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="catalogos"> Catálogos</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="clientes"> Clientes</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="facturacion"> Facturación</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="cxc"> CxC</NavLink></li>
                    </Authorized>
                </AuthorizeView>
            </ul>

            <AuthorizeView>
                <Authorized>
                    <span class="navbar-text me-3">
                        @context.User.Claims.Where(c => c.Type == ClaimTypes.Name).Select(c => c.Value).SingleOrDefault()
                    </span>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView>
                <Authorized>
                    <button class="btn btn-outline-light ms-auto ms-md-0 me-3" style="border-radius: 10px" type="button" @onclick="CerrarSesion">Salir</button>
                </Authorized>
                <NotAuthorized>
                    <a class="btn btn-outline-dark ms-auto ms-md-0 me-3" href="/login">Iniciar sesion</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;
    private bool collapseMenuUser = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private string? UserMenuCssClass => collapseMenuUser ? "show" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private void ToggleMenuUser()
    {
        collapseMenuUser = !collapseMenuUser;
    }

    protected override void OnInitialized()
    {
        carritoServicio.ActualizarVista += StateHasChanged;
    }
    public void Dispose()
    {
        carritoServicio.ActualizarVista += StateHasChanged;
    }

    private int mostrarCantidadCarrito()
    {
        return carritoServicio.CantidadProductos();
    }
    private async Task CerrarSesion()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Desea salir?",
                // Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
            });

        if (result.IsConfirmed)
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
            _navigationManager.NavigateTo("/", true);
        }
    }
}
