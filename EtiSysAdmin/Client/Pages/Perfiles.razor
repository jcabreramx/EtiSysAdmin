@page "/perfiles"
@inject IPerfilServicio perfilServicio;
@inject IToastService toastService
@inject SweetAlertService Swal;
@attribute [Authorize(Roles = "Usuario")]

<div class="row justify-content-center  mt-3">
    <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
        <div class="d-grid gap-1 col-12 mx-auto">
            <a class="btn btn-primary" href="/perfil">Nuevo Perfil</a>
        </div>
    </div>
    <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar perfil..." @bind-value="buscar">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async()=> await ObtenerPerfiles(buscar))">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>

<div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">

    @if (lista != null)
    {
        foreach (var item in lista)
        {
            <div class="col mb-5">
                <div class="card box-modal h-100">
                    <div class="card-body p-4">
                        <div class="text-center">
                            <div class="text-center">
                                <i class="oi oi-folder" style="font-size:50px"></i>
                            </div>
                            <div class="text-start">
                                <p class="m-1"><b>Nombre:</b>@item.Nombre</p>
                            </div>
                            <div class="text-start">
                                <p class="m-1"><b>Estatus:</b>@item.Estatus</p>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="row justify-content-between">
                            <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/perfil/@item.IdPerfil"><i class="oi oi-pencil fs-5"></i></a>
                            <button class="col-5 btn btn-sm btn-outline-danger mt-auto" type="button" @onclick="(async () => await Eliminar(item))">
                                <i class="oi oi-trash fs-5"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }




</div>
@code {
    private List<PerfilDTO>? lista = null;
    private string buscar = "";

    private async Task ObtenerPerfiles(string Valor = "")
    {
        var response = await perfilServicio.Lista(Valor);

        if (response.EsCorrecto)
        {
            lista = (List<PerfilDTO>)response.Resultado!;
        }
        else
        {
            lista = new List<PerfilDTO>();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await ObtenerPerfiles();
    }

    private async Task Eliminar(PerfilDTO modelo)
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar perfil: {modelo.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var response = await perfilServicio.Eliminar(modelo.IdPerfil);

            if (response.EsCorrecto)
            {
                await ObtenerPerfiles();
                toastService.ShowSuccess("Perfil fue eliminado");
            }
            else
                toastService.ShowSuccess(response.Mensaje!);
        }
    }
}
